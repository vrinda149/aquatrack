import 'package:fl_chart/fl_chart.dart';
import 'package:flutter/material.dart';

class EnhancedPractisePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Water Consumption Dashboard'),
        backgroundColor: AppColors.primary,
      ),
      body: FutureBuilder<ThinkSpeakModel>( 
        future: fetchAlbum(),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return Center(
              child: Text(
                'An error occurred while fetching data: ${snapshot.error}',
                style: const TextStyle(color: Colors.red),
                textAlign: TextAlign.center,
              ),
            );
          } else if (snapshot.hasData && snapshot.data!.feeds!.isNotEmpty) {
            return Padding(
              padding: const EdgeInsets.all(16.0),
              child: ListView(
                children: [
                  const Text(
                    'Water Flow Data',
                    style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 20),
                  _buildGraphSection(
                    context,
                    "Flow Rate (L/min)",
                    fiel1Graph(snapshot.data!.feeds!),
                    "This graph displays the real-time water flow rate in liters per minute over time.",
                  ),
                  const SizedBox(height: 20),
                  _buildGraphSection(
                    context,
                    "Cumulative Water Usage (Liters)",
                    fiel2Graph(snapshot.data!.feeds!),
                    "This graph shows the total volume of water used cumulatively over time.",
                  ),
                  const SizedBox(height: 20),
                  _buildDataList(snapshot.data!.feeds!),
                ],
              ),
            );
          } else {
            return const Center(
              child: Text(
                'No data available. Please check your connection or try again later.',
              ),
            );
          }
        },
      ),
    );
  }

  Widget _buildGraphSection(BuildContext context, String title,
      LineChartData chartData, String description) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          title,
          style: const TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
        ),
        const SizedBox(height: 10),
        SizedBox(
          height: 300,
          child: LineChart(chartData),
        ),
        const SizedBox(height: 10),
        Text(
          description,
          style: const TextStyle(fontSize: 16, color: Colors.white70),
        ),
      ],
    );
  }

  Widget _buildDataList(List<Feed> feeds) {
    return Column(
      children: feeds.map((feed) {
        return Card(
          child: ListTile(
            title: Text('Flow Rate: ${feed.field1} L/min'),
            subtitle: Text('Timestamp: ${feed.createdAt}'),
          ),
        );
      }).toList(),
    );
  }

  LineChartData fiel1Graph(List<Feed> feed) {
    final List<FlSpot> spots = List.generate(
      feed.length,
      (index) =>
          FlSpot(index.toDouble(), double.parse(feed[index].field1 ?? "0")),
    );

    return LineChartData(
      gridData: FlGridData(show: true),
      titlesData: FlTitlesData(
        leftTitles: SideTitles(
          showTitles: true,
          interval: 1,
          getTitlesWidget: (value, _) => Text('${value.toInt()} L/min'),
        ),
        bottomTitles: SideTitles(
          showTitles: true,
          interval: (feed.length / 5).floorToDouble(),
          getTitlesWidget: (value, _) => Text('Time ${value.toInt()}'),
        ),
      ),
      lineBarsData: [
        LineChartBarData(
          spots: spots,
          isCurved: true,
          barWidth: 2,
          colors: [AppColors.contentColorCyan],
        ),
      ],
    );
  }

  LineChartData fiel2Graph(List<Feed> feed) {
    final List<FlSpot> spots = List.generate(
      feed.length,
      (index) =>
          FlSpot(index.toDouble(), double.parse(feed[index].field2 ?? "0")),
    );

    return LineChartData(
      gridData: FlGridData(show: true),
      titlesData: FlTitlesData(
        leftTitles: SideTitles(
          showTitles: true,
          interval: 1,
          getTitlesWidget: (value, _) => Text('${value.toInt()} L'),
        ),
        bottomTitles: SideTitles(
          showTitles: true,
          interval: (feed.length / 5).floorToDouble(),
          getTitlesWidget: (value, _) => Text('Time ${value.toInt()}'),
        ),
      ),
      lineBarsData: [
        LineChartBarData(
          spots: spots,
          isCurved: true,
          barWidth: 2,
          colors: [AppColors.contentColorBlue],
        ),
      ],
    );
  }
}
