import 'dart:math';
import 'package:fl_chart/fl_chart.dart';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:project_1/thingspeakmodel.dart';

class AppColors {
  static const Color primary = Color(0xFF50E4FF);
  static const Color pageBackground = Color(0xFF282E45);
  static const Color mainTextColor = Colors.white;
  static const Color gridLineColor = Colors.white30;
  static const Color borderColor = Colors.white54;
}

class PractisePage extends StatelessWidget {
  const PractisePage({Key? key}) : super(key: key);

  Future<ThinkSpeakModel> fetchData() async {
    final response = await http.get(Uri.parse(
        'https://api.thingspeak.com/channels/2572653/feeds.json?api_key=USIJZMOCJ7E3HAWC'));

    if (response.statusCode == 200) {
      return thinkSpeakModelFromJson(response.body);
    } else {
      throw Exception('Failed to load data');
    }
  }

  LineChartData createGraphData(
      List<Feed> feed, String fieldName, String graphTitle, String yAxisLabel) {
    final List<FlSpot> spots = List.generate(
      feed.length,
      (index) => FlSpot(
          index.toDouble(), double.parse(feed[index.toJson()[fieldName]!)),
    );

    double maxValue = spots.map((e) => e.y).reduce(max);
    double minValue = spots.map((e) => e.y).reduce(min);

    return LineChartData(
      titlesData: FlTitlesData(
        leftTitles: SideTitles(
          showTitles: true,
          reservedSize: 40,
          getTitlesWidget: (value, _) =>
              Text(value.toString(), style: TextStyle(color: AppColors.mainTextColor)),
        ),
        bottomTitles: SideTitles(
          showTitles: true,
          getTitlesWidget: (value, _) => Text(
            value.toInt().toString(),
            style: TextStyle(color: AppColors.mainTextColor),
          ),
        ),
      ),
      gridData: FlGridData(
        show: true,
        drawVerticalLine: true,
        getDrawingHorizontalLine: (value) =>
            FlLine(color: AppColors.gridLineColor, strokeWidth: 1),
        getDrawingVerticalLine: (value) =>
            FlLine(color: AppColors.gridLineColor, strokeWidth: 1),
      ),
      borderData: FlBorderData(
        show: true,
        border: Border.all(color: AppColors.borderColor),
      ),
      minX: 0,
      maxX: spots.length.toDouble(),
      minY: minValue,
      maxY: maxValue,
      lineBarsData: [
        LineChartBarData(
          spots: spots,
          isCurved: true,
          colors: [AppColors.primary],
          barWidth: 2,
          belowBarData: BarAreaData(
            show: true,
            colors: [AppColors.primary.withOpacity(0.3)],
          ),
        ),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.pageBackground,
      appBar: AppBar(
        backgroundColor: AppColors.primary,
        title: Text('Water Usage Dashboard'),
        centerTitle: true,
      ),
      body: FutureBuilder<ThinkSpeakModel>(
        future: fetchData(),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return Center(child: Text('Error: ${snapshot.error}'));
          } else if (snapshot.hasData) {
            final feeds = snapshot.data!.feeds!;
            return SingleChildScrollView(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'Graph 1: Flow Rate Over Time',
                    style: TextStyle(
                        color: AppColors.mainTextColor,
                        fontSize: 18,
                        fontWeight: FontWeight.bold),
                  ),
                  Text(
                    'This graph displays the real-time flow rate of water (in liters per minute) measured by the sensor.',
                    style: TextStyle(color: AppColors.mainTextColor, fontSize: 14),
                  ),
                  SizedBox(
                    height: 300,
                    child: LineChart(createGraphData(feeds, 'field1',
                        'Flow Rate Over Time', 'Flow Rate (L/min)')),
                  ),
                  const SizedBox(height: 16),
                  Text(
                    'Graph 2: Cumulative Water Volume',
                    style: TextStyle(
                        color: AppColors.mainTextColor,
                        fontSize: 18,
                        fontWeight: FontWeight.bold),
                  ),
                  Text(
                    'This graph shows the cumulative volume of water used (in liters) over time.',
                    style: TextStyle(color: AppColors.mainTextColor, fontSize: 14),
                  ),
                  SizedBox(
                    height: 300,
                    child: LineChart(createGraphData(feeds, 'field2',
                        'Cumulative Water Volume', 'Volume (L)')),
                  ),
                ],
              ),
            );
          } else {
            return const Center(child: Text('No data available'));
          }
        },
      ),
    );
  }
}
