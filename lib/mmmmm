import 'dart:math';

import 'package:fl_chart/fl_chart.dart';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:project_1/thingspeakmodel.dart';

class AppColors {
  static const Color primary = Color(0xFF50E4FF); // Water cyan
  static const Color secondary = Color(0xFF2196F3); // Deep blue
  static const Color accent = Color(0xFF3BFF49); // Sustainability green
  static const Color background = Color(0xFFF6FAFF); // Light background
  static const Color textPrimary = Color(0xFF023047); // Dark blue
  static const Color textSecondary = Color(0xFF8ECAE6); // Light green-blue
}

class Practisepage extends StatelessWidget {
  Practisepage({super.key});

  Future<ThinkSpeakModel> fetchAlbum() async {
    final response = await http.get(Uri.parse(
        'https://api.thingspeak.com/channels/2572653/feeds.json?api_key=USIJZMOCJ7E3HAWC'));

    if (response.statusCode == 200) {
      return thinkSpeakModelFromJson(response.body);
    } else {
      throw Exception('Failed to load data');
    }
  }

  final List<Color> gradientColors = [
    AppColors.primary,
    AppColors.secondary,
  ];

  LineChartData buildGraph(List<Feed> feed, String fieldName) {
    final spots = List.generate(
      feed.length,
      (index) => FlSpot(index.toDouble(),
          double.parse(fieldName == 'field1' ? feed[index].field1 : feed[index].field2)),
    );

    final maxY = spots.map((spot) => spot.y).reduce(max);
    final minY = spots.map((spot) => spot.y).reduce(min);

    return LineChartData(
      gridData: FlGridData(
        show: true,
        horizontalInterval: 1,
        verticalInterval: 1,
        getDrawingHorizontalLine: (value) => const FlLine(color: Colors.grey, strokeWidth: 0.5),
        getDrawingVerticalLine: (value) => const FlLine(color: Colors.grey, strokeWidth: 0.5),
      ),
      titlesData: FlTitlesData(
        leftTitles: SideTitles(showTitles: true, interval: 1),
        bottomTitles: SideTitles(showTitles: true, interval: 2),
      ),
      borderData: FlBorderData(
        show: true,
        border: Border.all(color: Colors.grey),
      ),
      minX: 0,
      maxX: feed.length.toDouble(),
      minY: minY,
      maxY: maxY,
      lineBarsData: [
        LineChartBarData(
          spots: spots,
          isCurved: true,
          gradient: LinearGradient(colors: gradientColors),
          barWidth: 3,
          belowBarData: BarAreaData(
            show: true,
            gradient: LinearGradient(
              colors: gradientColors.map((color) => color.withOpacity(0.3)).toList(),
            ),
          ),
        ),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.background,
      appBar: AppBar(
        title: const Text("Water Sustainability Dashboard"),
        backgroundColor: AppColors.primary,
        centerTitle: true,
      ),
      body: FutureBuilder<ThinkSpeakModel>(
        future: fetchAlbum(),
        builder: (context, snapshot) {
          if (snapshot.hasData) {
            return Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                children: [
                  Text(
                    "Water Usage Analytics",
                    style: TextStyle(
                      color: AppColors.textPrimary,
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 16),
                  Row(
                    children: [
                      Expanded(
                        child: Card(
                          elevation: 8,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: Padding(
                            padding: const EdgeInsets.all(16.0),
                            child: Column(
                              children: [
                                SizedBox(
                                  height: 200,
                                  child: LineChart(
                                    buildGraph(snapshot.data!.feeds!, 'field1'),
                                  ),
                                ),
                                const SizedBox(height: 8),
                                Text(
                                  "Flow Rate",
                                  style: TextStyle(
                                    color: AppColors.textSecondary,
                                    fontSize: 16,
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      ),
                      const SizedBox(width: 16),
                      Expanded(
                        child: Card(
                          elevation: 8,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: Padding(
                            padding: const EdgeInsets.all(16.0),
                            child: Column(
                              children: [
                                SizedBox(
                                  height: 200,
                                  child: LineChart(
                                    buildGraph(snapshot.data!.feeds!, 'field2'),
                                  ),
                                ),
                                const SizedBox(height: 8),
                                Text(
                                  "Cumulative Water Volume",
                                  style: TextStyle(
                                    color: AppColors.textSecondary,
                                    fontSize: 16,
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 16),
                  Expanded(
                    child: ListView(
                      children: snapshot.data!.feeds!
                          .map(
                            (data) => Card(
                              margin: const EdgeInsets.symmetric(vertical: 8),
                              child: ListTile(
                                title: Text(
                                  "Date: ${data.createdAt}",
                                  style: TextStyle(color: AppColors.textPrimary),
                                ),
                                subtitle: Text(
                                  "Flow: ${data.field1} | Volume: ${data.field2}",
                                  style: TextStyle(color: AppColors.textSecondary),
                                ),
                                trailing: Icon(Icons.water_drop, color: AppColors.accent),
                              ),
                            ),
                          )
                          .toList(),
                    ),
                  ),
                ],
              ),
            );
          } else if (snapshot.hasError) {
            return Center(
              child: Text(
                'Error: ${snapshot.error}',
                style: TextStyle(color: AppColors.textPrimary),
              ),
            );
          }
          return const Center(child: CircularProgressIndicator());
        },
      ),
    );
  }
}
